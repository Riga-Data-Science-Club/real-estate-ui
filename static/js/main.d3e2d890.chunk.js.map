{"version":3,"sources":["config/prod.js","components/RealEstateFormControl.js","components/HouseSeriesSelect.js","components/HouseTypeSelect.js","components/elements/Step.js","components/providers/ConfigProvider.js","components/GooglePlacesAutocomplete.js","components/EnterLocation.js","components/RigaRealEstateMap.js","views/Home.js","App.js","serviceWorker.js","index.js","config/index.js"],"names":["module","exports","GOOGLE_MAP_API_KEY","RealEstateFormControl","withStyles","root","minWidth","width","textAlign","marginBottom","padding","FormControl","HOUSE_SERIES","label","value","HouseSeriesSelect","onChange","variant","InputLabel","Select","map","s","MenuItem","key","HOUSE_TYPES","HouseTypeSelect","t","useStyles","makeStyles","stepContainer","maxWidth","paddingRight","display","flexDirection","justifyContent","alignItems","alignContent","flexWrap","stepHeader","marginLeft","justifyItems","stepHeaderTitle","stepTitle","stepCompleteIcon","color","props","complete","fontWeight","Step","children","icon","title","hideCompleteIcon","classes","className","Context","React","createContext","config","useConfig","context","useContext","Error","ConfigProvider","Provider","autocompleteService","current","theme","palette","text","secondary","marginRight","spacing","GooglePlacesAutocomplete","setValue","useState","inputValue","setInputValue","options","setOptions","fetchPlacePredictions","useRef","useMemo","throttle","request","callback","getPlacePredictions","useEffect","active","window","google","maps","places","AutocompleteService","RIGA","LatLng","RIGA_CENTER_LATITUDE","RIGA_CENTER_LONGITUDE","riga","Circle","center","radius","input","bounds","getBounds","strictbounds","types","language","results","newOptions","Autocomplete","id","fullWidth","getOptionLabel","option","description","filterOptions","x","autoComplete","includeInputInList","filterSelectedOptions","noOptionsText","event","newValue","onInputChange","newInputValue","renderInput","params","TextField","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","match","offset","length","Grid","container","item","xs","part","index","style","highlight","Typography","secondary_text","locationContainer","locationButton","marginTop","placesService","EnterLocation","location","setLocation","canUseGeolocation","setCanUseGeolocation","place","setPlace","navigator","geolocation","fetchPlaceDetails","getDetails","formatCoordinates","coordinate","Math","round","onPositionObtained","position","coords","PlacesService","placeId","place_id","fields","status","PlacesServiceStatus","OK","latitude","geometry","lat","longitude","lng","margin","fontSize","Button","size","onClick","getCurrentPosition","console","error","height","RigaRealEstateMap","setMap","googleMapRef","createRef","markersRef","Map","zoom","fullscreenControl","streetViewControl","mapTypeControl","markers","clearMarkers","marker","Marker","draggable","panTo","getPosition","addListener","push","ref","header","controls","textField","predictions","prediction","ai","backgroundImage","process","backgroundSize","backgroundPosition","backgroundRepeat","formatter","Intl","NumberFormat","currency","Home","area","setArea","floor","setFloor","rooms","setRooms","totalFloors","setTotalFloors","condition","houseType","setHouseType","houseSeria","setHouseSeria","district","loading","setLoading","setPredictions","createInputInstance","operation","fetch","method","mode","body","JSON","stringify","instances","then","res","json","result","catch","log","Container","gutterBottom","xl","lg","md","sm","target","type","toString","parseInt","CircularProgress","format","App","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message","require"],"mappings":"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","file":"static/js/main.d3e2d890.chunk.js","sourcesContent":["module.exports = {\n  GOOGLE_MAP_API_KEY: 'AIzaSyB_xFxo_VBEj2rI21-zA9WIDCsvAlhhaN0',\n};\n","import {withStyles} from \"@material-ui/core/styles\";\nimport {FormControl} from \"@material-ui/core\";\n\nexport const RealEstateFormControl = withStyles(() => ({\n    root: {\n        minWidth: 120,\n        width: '100%',\n        textAlign: 'left',\n        marginBottom: 10,\n        padding: 0,\n    },\n}))(FormControl);","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport {RealEstateFormControl} from \"./RealEstateFormControl\";\n\nconst HOUSE_SERIES = [\n    {label: 'Lietuviešu projekts', value: 'LT proj.'},\n    {label: '602. sērija', value: '602.'},\n    {label: 'Pirmskara māja', value: 'P. kara'},\n    {label: 'Jaunbūve', value: 'Jaun.'},\n    {label: 'Specprojects', value: 'Specpr.'},\n    {label: 'Hruščova laika projekts', value: 'Hrušč.'},\n    {label: '119. sērija', value: '119.'},\n    {label: 'Mazģimeņu projekts', value: 'M. ģim.'},\n    {label: 'Renovētā māja', value: 'Renov.'},\n    {label: '103. sērija', value: '103.'},\n    {label: 'Privātmāja', value: 'Priv. m.'},\n    {label: '467. sērija', value: '467.'},\n    {label: 'Staļina laika māja', value: 'Staļina'},\n    {label: '104. sērija', value: '104.'},\n    {label: 'Čehu projekts', value: 'Čehu pr.'},\n];\n\nexport function HouseSeriesSelect({value, onChange}) {\n    return (\n        <RealEstateFormControl variant='outlined'>\n            <InputLabel>House series</InputLabel>\n            <Select\n                value={value}\n                onChange={onChange}\n                label='House series'\n            >\n                {HOUSE_SERIES.map(s => <MenuItem key={s.value} value={s.value}>{s.label}</MenuItem>)}\n            </Select>\n        </RealEstateFormControl>\n    );\n}","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport {RealEstateFormControl} from \"./RealEstateFormControl\";\n\nconst HOUSE_TYPES = [\n    {label: 'Kieģeļu-paneļu', value: 'Brick-Panel'},\n    {label: 'Lielpaneļu', value: 'Panel'},\n    {label: 'Koka', value: 'Wood'},\n    {label: 'Mūra', value: 'Masonry'},\n    {label: 'Kieģeļu-paneļu', value: 'Brick'},\n    {label: 'Paneļu-kieģelu', value: 'Panel-Brick'},\n]\n\nexport function HouseTypeSelect({value, onChange}) {\n    return (\n        <RealEstateFormControl variant='outlined'>\n            <InputLabel>House type</InputLabel>\n            <Select\n                value={value}\n                onChange={onChange}\n                label='House type'\n            >\n                {HOUSE_TYPES.map(t => <MenuItem key={t.value} value={t.value}>{t.label}</MenuItem>)}\n            </Select>\n        </RealEstateFormControl>\n    );\n}","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\n\nconst useStyles = makeStyles({\n    stepContainer: {\n        width: '100%',\n        maxWidth: '300px',\n        paddingRight: '15px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        alignContent: 'center',\n        flexWrap: 'wrap'\n    },\n    stepHeader: {\n        width: '100%',\n        marginLeft: '3px',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignContent: 'center',\n        justifyItems: 'center',\n        alignItems: 'center',\n    },\n    stepHeaderTitle: {\n        marginLeft: '3px',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        alignContent: 'center',\n    },\n    stepTitle: {\n        marginLeft: '3px',\n    },\n    stepCompleteIcon: {\n        color: props => props.complete ? '#18ac2f' : '#dddddd',\n        fontWeight: '900',\n    },\n});\n\nexport default function Step({children, icon, title, complete, hideCompleteIcon = false}) {\n    const classes = useStyles({complete});\n    return (\n        <div className={classes.stepContainer}>\n            <div className={classes.stepHeader}>\n                <div className={classes.stepHeaderTitle}>\n                    {icon}\n                    <h3 className={classes.stepTitle}>{title}</h3>\n                </div>\n                {!hideCompleteIcon && <div className={classes.stepCompleteIcon}>\n                    <CheckCircleOutlineIcon />\n                </div>}\n            </div>\n            {children}\n        </div>\n    );\n}","import React from 'react'\nimport config from '../../config'\n\nconst Context = React.createContext(config)\n\nexport function useConfig() {\n    const context = React.useContext(Context)\n    if (!context) {\n        throw new Error('useConfig must be used within a ConfigProvider')\n    }\n    return context\n}\n\nexport default function ConfigProvider({ value, children }) {\n    return <Context.Provider value={value || config}>{children}</Context.Provider>\n}","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport {useConfig} from \"./providers/ConfigProvider\";\n\nfunction loadScript(src, position, id) {\n    if (!position) {\n        return;\n    }\n\n    const script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('id', id);\n    script.src = src;\n    position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        color: theme.palette.text.secondary,\n        marginRight: theme.spacing(2),\n    },\n}));\n\nexport default function GooglePlacesAutocomplete({value, setValue}) {\n    const config = useConfig();\n    const classes = useStyles();\n    const [inputValue, setInputValue] = React.useState('');\n    const [options, setOptions] = React.useState([]);\n    const loaded = React.useRef(false);\n    const fetchPlacePredictions = React.useMemo(\n        () =>\n            throttle((request, callback) => {\n                autocompleteService.current.getPlacePredictions(request, callback);\n            }, 200),\n        [],\n    );\n\n    React.useEffect(() => {\n        let active = true;\n\n        if (!autocompleteService.current && window.google) {\n            autocompleteService.current = new window.google.maps.places.AutocompleteService();\n        }\n        if (!autocompleteService.current) {\n            return undefined;\n        }\n        const RIGA = new window.google.maps.LatLng(config.RIGA_CENTER_LATITUDE, config.RIGA_CENTER_LONGITUDE);\n        if (inputValue === '') {\n            setOptions(value ? [value] : []);\n            return undefined;\n        }\n        const riga = new window.google.maps.Circle({ center: RIGA, radius: 12000 });\n        fetchPlacePredictions({ input: inputValue, bounds: riga.getBounds(), strictbounds: true, types: ['address'], language: 'lv'}, (results) => {\n            if (active) {\n                let newOptions = [];\n\n                if (value) {\n                    newOptions = [value];\n                }\n\n                if (results) {\n                    newOptions = [...newOptions, ...results];\n                }\n\n                setOptions(newOptions);\n            }\n        });\n\n        return () => {\n            active = false;\n        };\n    }, [value, inputValue, fetchPlacePredictions]);\n\n    return (\n        <Autocomplete\n            id=\"google-map-demo\"\n            fullWidth\n            getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\n            filterOptions={(x) => x}\n            options={options}\n            autoComplete\n            includeInputInList\n            filterSelectedOptions\n            noOptionsText={\"Start typing...\"}\n            value={value}\n            onChange={(event, newValue) => {\n                setOptions(newValue ? [newValue, ...options] : options);\n                setValue(newValue);\n            }}\n            onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n            }}\n            renderInput={(params) => (\n                <TextField {...params} label=\"Please enter the address\" variant=\"outlined\" fullWidth />\n            )}\n            renderOption={(option) => {\n                const matches = option.structured_formatting.main_text_matched_substrings;\n                const parts = parse(\n                    option.structured_formatting.main_text,\n                    matches.map((match) => [match.offset, match.offset + match.length]),\n                );\n\n                return (\n                    <Grid container alignItems=\"center\">\n                        <Grid item>\n                            <LocationOnIcon className={classes.icon} />\n                        </Grid>\n                        <Grid item xs>\n                            {parts.map((part, index) => (\n                                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                  {part.text}\n                </span>\n                            ))}\n\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                {option.structured_formatting.secondary_text}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                );\n            }}\n        />\n    );\n}","import GooglePlacesAutocomplete from \"./GooglePlacesAutocomplete\";\nimport Button from '@material-ui/core/Button';\nimport React, {useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useConfig} from \"./providers/ConfigProvider\";\nimport throttle from \"lodash/throttle\";\n\nconst useStyles = makeStyles(() => ({\n    locationContainer: {\n        width: '100%',\n        textAlign: 'center',\n    },\n    locationButton: {\n        marginTop: '10px',\n    },\n}));\n\nconst placesService = { current: null };\n\n/**\n * @param onChange callback will be invoked with {latitude, latitude} once location selected\n * @returns {latitude, latitude}\n * @constructor\n */\nexport default function EnterLocation({location, setLocation, map}) {\n    const config = useConfig();\n    const classes = useStyles({location, config});\n    const [canUseGeolocation, setCanUseGeolocation] = useState(false);\n    const [place, setPlace] = useState(null);\n    const [photoReference, setPhotoReference] = useState(null);\n\n    React.useEffect(() => {\n        if (navigator.geolocation) {\n            setCanUseGeolocation(true);\n        }\n    }, [canUseGeolocation, setCanUseGeolocation]);\n\n    const fetchPlaceDetails= React.useMemo(\n        () =>\n            throttle((request, callback) => {\n                placesService.current.getDetails(request, callback);\n            }, 200),\n        [],\n    );\n\n    React.useEffect(() => {\n        if (!placesService.current && window.google && map) {\n            placesService.current = new window.google.maps.places.PlacesService(map);\n        }\n        if (!placesService.current) {\n            return undefined;\n        }\n        if(place) {\n            fetchPlaceDetails({placeId: place.place_id, fields: ['geometry']}, (place, status) => {\n                if (status == window.google.maps.places.PlacesServiceStatus.OK) {\n                    const latitude = place.geometry.location.lat();\n                    const longitude = place.geometry.location.lng();\n                    setLocation({latitude, longitude});\n                }\n            });\n        }\n    }, [map, place, fetchPlaceDetails]);\n\n    function getGeolocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(onPositionObtained);\n        } else {\n            console.error(\"Geolocation is not supported by this browser.\");\n        }\n    }\n\n    function formatCoordinates(coordinate) {\n        return Math.round(coordinate * 1e6) / 1e6;\n    }\n    function onPositionObtained(position) {\n        setPlace(null);\n        setLocation(position.coords); // {latitude, latitude}\n    }\n\n    return (<div className={classes.locationContainer}>\n        <GooglePlacesAutocomplete\n            value={place}\n            setValue={place => {\n                setPlace(place);\n            }} />\n        {canUseGeolocation && <><span style={{margin: '2px 0', fontSize: '12px'}}>or</span><Button\n            className={classes.locationButton}\n            variant=\"contained\"\n            color=\"default\"\n            size={\"large\"}\n            fullWidth\n            onClick={getGeolocation}>Use device location\n        </Button></>}\n        {(location && location.latitude && location.longitude)&&<p>{formatCoordinates(location.latitude)}° N, {formatCoordinates(location.longitude)}° E</p>}\n    </div>)\n\n}","import React, {createRef, useEffect, useRef, useState} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useConfig} from \"./providers/ConfigProvider\";\n\nconst useStyles = makeStyles({\n    map: {\n        width: '100%',\n        height: '70vh',\n    },\n});\n\nexport default function RigaRealEstateMap({map, setMap, location, setLocation}) {\n    const classes = useStyles();\n    const config = useConfig();\n    const googleMapRef = createRef();\n    const markersRef = useRef([]);\n\n    React.useEffect(() => {\n        if(window.google) {\n            setMap(new window.google.maps.Map(googleMapRef.current, {\n                center: {lat: config.RIGA_CENTER_LATITUDE, lng: config.RIGA_CENTER_LONGITUDE},\n                zoom: 15,\n                fullscreenControl: false,\n                streetViewControl: false,\n                mapTypeControl: false,\n            }));\n        }\n    }, [setMap, config.RIGA_CENTER_LATITUDE, config.RIGA_CENTER_LONGITUDE]);\n\n    function clearMarkers(markers) {\n        for (let m of markers) {\n            m.setMap(null);\n        }\n    }\n    React.useEffect(() => {\n        if(location && location.latitude && location.longitude) {\n            clearMarkers(markersRef.current);\n            const marker = new window.google.maps.Marker({\n                map: map,\n                draggable: true,\n                position: {lat: location.latitude, lng: location.longitude},\n            });\n            map.panTo(marker.getPosition());\n            window.google.maps.event.addListener(marker, 'dragend', () => {\n                const latitude = marker.getPosition().lat();\n                const longitude = marker.getPosition().lng();\n                setLocation({latitude, longitude});\n            });\n            markersRef.current.push(marker);\n        }\n    }, [location, setLocation]);\n    return (\n        <div ref={googleMapRef} className={classes.map}/>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport {makeStyles, withStyles} from \"@material-ui/core/styles\";\nimport {HouseSeriesSelect} from \"../components/HouseSeriesSelect\";\nimport {HouseTypeSelect} from \"../components/HouseTypeSelect\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Step from \"../components/elements/Step\";\nimport EnterLocation from \"../components/EnterLocation\";\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Typography from '@material-ui/core/Typography';\nimport HomeIcon from '@material-ui/icons/Home';\nimport FormatLineSpacingIcon from '@material-ui/icons/FormatLineSpacing';\nimport EuroSharpIcon from '@material-ui/icons/EuroSharp';\nimport {RealEstateFormControl} from \"../components/RealEstateFormControl\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport RigaRealEstateMap from \"../components/RigaRealEstateMap\";\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '100%',\n    },\n    header : {\n        textAlign: 'left',\n    },\n    controls: {\n        width: '100%',\n        margin: '0 auto',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n        alignContent: 'center',\n        flexWrap: 'wrap'\n    },\n    textField: {\n        width: '100%',\n        margin: 0,\n    },\n    predictions: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    prediction: {\n        width: '100%',\n        margin: '15px',\n        textAlign: 'center',\n    },\n    ai: {\n        margin: '8px',\n        width: '80px',\n        height: '80px',\n        backgroundImage: `url(${process.env.PUBLIC_URL}/images/avatar/ai.png)`,\n        backgroundSize: \"contain\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n    }\n}));\n\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'EUR',\n});\n\nexport default function Home() {\n    const classes = useStyles();\n    const [map, setMap] = useState(null);\n    const [place, setPlace] = useState(2);\n    const [location, setLocation] = useState(null);\n    const [area, setArea] = useState(50);\n    const [floor, setFloor] = useState(5);\n    const [rooms, setRooms] = useState(2);\n    const [totalFloors, setTotalFloors] = useState(9);\n    const [condition, setCondition] = useState('All, amenities');\n    const [houseType, setHouseType] = useState('Panel');\n    const [houseSeria, setHouseSeria] = useState('119.');\n    const [district, setDistrict] = useState('Purvciems');\n    const [loading, setLoading] = useState(false);\n    const [predictions, setPredictions] = useState(null);\n\n    const allFieldsAreComplete = () => {\n        return area && floor && rooms && totalFloors\n            && condition && houseType && houseSeria && district\n            && location && location.latitude && location.longitude;\n    }\n\n    const createInputInstance = operation => ({\n        'op_type': [operation],\n        'district': [district],\n        'street': [''],\n        'rooms': [rooms],\n        'area': [area],\n        'floor': [floor],\n        'total_floors': [totalFloors],\n        'house_seria': [houseSeria],\n        'house_type': [houseType],\n        'condition': [condition],\n        'lat': [location.latitude],\n        'lon': [location.longitude],\n    });\n\n    useEffect(() => {\n        if(allFieldsAreComplete()) {\n            setLoading(true);\n            setPredictions(null);\n            fetch(\"https://api.rigadsclub.com/v1/models/riga:predict\", {\n                    method: \"POST\",\n                    mode: 'no-cors',\n                    body: JSON.stringify({\n                        instances: [\n                            createInputInstance('For sale'),\n                            createInputInstance('For rent'),\n                        ]\n                    }),\n                }\n            )\n                .then(res => res.json())\n                .then(result => {\n                    setPredictions(result.predictions);\n                    setLoading(false);\n                })\n                .catch(error => {\n                    console.log(error);\n                    setLoading(false);\n                });\n        }\n    }, [area, floor, rooms, totalFloors, condition, houseType, houseSeria, district, location,\n        setPredictions]);\n\n    return (\n        <div className={classes.root}>\n            <RigaRealEstateMap map={map} setMap={setMap} location={location} setLocation={setLocation} />\n            <Container>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    Complete few fields below to get rent and sale price estimation for any property located in Riga, Latvia:\n                </Typography>\n                <Grid container spacing={1}>\n                    <Grid item xl={3} lg={3} md={4} sm={6} xs={12} spacing={3}>\n                        <Step icon={<LocationOnIcon/>} title={'Real estate location'} complete={location}>\n                            <EnterLocation map={map} location={location} setLocation={setLocation} />\n                        </Step>\n                    </Grid>\n                    <Grid item xl={3} lg={3} md={4} sm={6} xs={12} spacing={3}>\n                        {place && <Step icon={<HomeIcon/>} title={\"House properties\"} complete={houseSeria && houseType && totalFloors}>\n                            <HouseSeriesSelect value={houseSeria} onChange={event => setHouseSeria(event.target.value)} />\n                            <HouseTypeSelect value={houseType} onChange={event => setHouseType(event.target.value)} />\n                            <RealEstateFormControl>\n                                <TextField\n                                    className={classes.textField}\n                                    label=\"Floor count\"\n                                    type=\"number\"\n                                    variant=\"outlined\"\n                                    value={totalFloors.toString()}\n                                    onChange={event => setTotalFloors(parseInt(event.target.value))}\n                                />\n                            </RealEstateFormControl>\n                        </Step>}\n                    </Grid>\n\n                    <Grid item xl={3} lg={3} md={4} sm={6} xs={12} spacing={3}>\n                        {place && <Step icon={<FormatLineSpacingIcon />} title={\"Flat properties\"} complete={floor && area && rooms}>\n                            <RealEstateFormControl variant='outlined'>\n                                <TextField\n                                    className={classes.textField}\n                                    label=\"Floor\"\n                                    type=\"number\"\n                                    variant=\"outlined\"\n                                    value={floor.toString()}\n                                    onChange={event => setFloor(parseInt(event.target.value))}\n                                />\n                            </RealEstateFormControl>\n                            <RealEstateFormControl variant='outlined'>\n                                <TextField\n                                    className={classes.textField}\n                                    label=\"Area\"\n                                    type=\"number\"\n                                    variant=\"outlined\"\n                                    value={area.toString()}\n                                    onChange={event => setArea(parseInt(event.target.value))}\n                                />\n                            </RealEstateFormControl>\n                            <RealEstateFormControl variant='outlined'>\n                                <TextField\n                                    className={classes.textField}\n                                    label=\"Room count\"\n                                    type=\"number\"\n                                    variant=\"outlined\"\n                                    value={rooms.toString()}\n                                    onChange={event => setRooms(parseInt(event.target.value))}\n                                />\n                            </RealEstateFormControl>\n                        </Step>}\n                    </Grid>\n\n                    <Grid item xl={3} lg={3} md={4} sm={6} xs={12} spacing={3}>\n                        <Step icon={<EuroSharpIcon />} title={\"Prediction\"} hideCompleteIcon>\n                            {loading && <CircularProgress />}\n                            {predictions && <div className={classes.predictions}>\n                                <div className={classes.prediction}>\n                                    For sale:\n                                    <h2 style={{margin: 3}}>{formatter.format(predictions[0][0])}</h2>\n                                </div>\n                                <div className={classes.prediction}>\n                                    For rent:\n                                    <h2 style={{margin: 3}}>{formatter.format(predictions[1][0])}</h2>\n                                </div>\n                            </div>}\n                        </Step>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport Home from \"./views/Home\";\nimport ConfigProvider from \"./components/providers/ConfigProvider\";\n\nfunction App() {\n  return (\n      <ConfigProvider>\n        <Home />\n      </ConfigProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./prod')\n} else {\n  module.exports = require('./dev')\n}\n"],"sourceRoot":""}